{"version":3,"sources":["logo.svg","utils/Type.js","storage/asyncStorage.js","model/DataFormatter.js","network/API.js","components/Sgt.js","components/Sgacl.js","components/Mapping.js","components/Header.js","components/Homepage.js","components/IP_SGTMapping.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","type","store","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","newObject","oldArray","mergedArray","wrap","_context","prev","next","localStorage","getItem","sent","JSON","stringify","concat","toConsumableArray","parse","setItem","console","warn","t0","message","stop","this","_x","_x2","apply","arguments","getStorage","_ref2","_callee2","myArray","_context2","t1","t2","abrupt","call","t3","_x3","getSetUUID","_ref3","_callee3","valueType","name","callBack","data","dataArray","_context3","map","item","uuid","_x4","_x5","_x6","getSelectedMapping","_ref4","_callee4","_context4","sgtName","log","_x7","_x8","clearData","_ref5","_callee5","_context5","removeItem","_x9","egressmatrixcellFormatter","destinationSgtIdUUID","sgaclsUUID","sourceSgtId","EgressMatrixCell","destinationSgtId","matrixCellStatus","defaultRule","sgacls","headers","Content-Type","Accept","getBodyEgress","TYPE","value","body","getBody","sgtUUID","hostName","Sgt","id","description","sgtFormatter","Sgacl","ipVersion","aclcontent","sgACLsFormatter","SGMapping","sgt","deployTo","deployType","postData","subUrl","URL","getURL","b","itr","len","arrLen","axios","get","then","response","SearchResult","total","push","resources","catch","error","length","t4","t5","post","index","status","location","substring","alert","dataFormatter","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","state","handleSubmit","bind","assertThisInitialized","event","preventDefault","_this2","react_default","createElement","onSubmit","onChange","setState","target","onClick","React","Component","sgaclName","rows","cols","sgaclContent","Mapping","selectedSecurityGroup","selectedSecurityGroupACLs","selectedSecurityGroupUUID","selectedSecurityGroupACLsUUID","SecurityGroup","SecurityGroupACLs","setUUIDValue","sgtACLsName","_this3","onValueChangeSecurityGroup","key","toString","onValueChangeSecurityGroupACLs","Header","className","src","logo","alt","Link","to","HomePage","IP_SGTMapping","selectedMappingName","selectedMapping","mappings","ipAddress","setMapping","setTimeout","_this4","onValueChangeMapping","destUrl","clear","App","BrowserRouter","components_Header","Route","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kSCA3BC,EACH,gBADGA,EAEC,oBAFDA,EAGE,oBAHFA,EAIK,mBCDLC,EAAK,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,EAAOR,EAAMS,GAAb,IAAAC,EAAAC,EAAA,OAAAN,EAAAC,EAAAM,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEMC,aAAaC,QAAQjB,GAF3B,cAEXU,EAFWG,EAAAK,KAGbP,EAAcD,EACdS,KAAKC,UAAL,GAAAC,OAAAlB,OAAAmB,EAAA,EAAAnB,CAAmBgB,KAAKI,MAAMb,IAA9B,CAAyCD,KACzCU,KAAKC,UAAU,CAACX,IALHI,EAAAE,KAAA,EAMXC,aAAaQ,QAAQxB,EAAMW,GANhB,OAOjBc,QAAQC,KAAK1B,EAAO,KAAMW,GAPTE,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAc,GAAAd,EAAA,SASjBY,QAAQC,KAAK,YAAcb,EAAAc,GAAMC,SAThB,yBAAAf,EAAAgB,SAAArB,EAAAsB,KAAA,aAAH,gBAAAC,EAAAC,GAAA,OAAA9B,EAAA+B,MAAAH,KAAAI,YAAA,GAaLC,EAAU,eAAAC,EAAAjC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAA8B,EAAMrC,GAAN,IAAAsC,EAAA,OAAAjC,EAAAC,EAAAM,KAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,cAAAwB,EAAAzB,KAAA,EAAAyB,EAAAxB,KAAA,EAEAC,aAAaC,QAAQjB,GAFrB,cAEhBsC,EAFgBC,EAAArB,KAAAqB,EAAAxB,KAAA,EAGXuB,EAHW,UAAAC,EAAAZ,GAAAY,EAAArB,KAGE,OAHFqB,EAAAZ,GAAA,CAAAY,EAAAxB,KAAA,gBAAAwB,EAAAC,GAIbrB,KAJaoB,EAAAxB,KAAA,GAIIuB,EAJJ,eAAAC,EAAAE,GAAAF,EAAArB,KAAAqB,EAAAG,OAAA,SAAAH,EAAAC,GAIRjB,MAJQoB,KAAAJ,EAAAC,GAAAD,EAAAE,KAAA,eAAAF,EAAAG,OAAA,SAKR,IALQ,QAAAH,EAAAxB,KAAA,iBAAAwB,EAAAzB,KAAA,GAAAyB,EAAAK,GAAAL,EAAA,SAOtBd,QAAQC,KAAK,YAAca,EAAAK,GAAMhB,SAPX,yBAAAW,EAAAV,SAAAQ,EAAAP,KAAA,aAAH,gBAAAe,GAAA,OAAAT,EAAAH,MAAAH,KAAAI,YAAA,GAUVY,EAAU,eAAAC,EAAA5C,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAyC,EAAOC,EAAWC,EAAMC,GAAxB,IAAAC,EAAAC,EAAA,OAAAhD,EAAAC,EAAAM,KAAA,SAAA0C,GAAA,cAAAA,EAAAxC,KAAAwC,EAAAvC,MAAA,cAAAuC,EAAAxC,KAAA,EAAAwC,EAAAvC,KAAA,EAEHC,aAAaC,QAAQgC,GAFlB,YAEhBG,EAFgBE,EAAApC,MAAA,CAAAoC,EAAAvC,KAAA,eAAAuC,EAAAvC,KAAA,EAIEI,KAAKI,MAAM6B,GAJb,QAIhBC,EAJgBC,EAAApC,OAMlBmC,EAAUE,IAAI,SAAAC,GACRA,GACEN,IAASM,EAAKN,MAChBC,EAASF,EAAWO,EAAKC,QATb,OAAAH,EAAAvC,KAAA,iBAAAuC,EAAAxC,KAAA,GAAAwC,EAAA3B,GAAA2B,EAAA,SAgBtB7B,QAAQC,KAAK,uBAAyB4B,EAAA3B,GAAMC,SAhBtB,yBAAA0B,EAAAzB,SAAAmB,EAAAlB,KAAA,aAAH,gBAAA4B,EAAAC,EAAAC,GAAA,OAAAb,EAAAd,MAAAH,KAAAI,YAAA,GAmBV2B,EAAkB,eAAAC,EAAA3D,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAwD,EAAOb,EAAMC,GAAb,IAAAC,EAAAC,EAAA,OAAAhD,EAAAC,EAAAM,KAAA,SAAAoD,GAAA,cAAAA,EAAAlD,KAAAkD,EAAAjD,MAAA,cAAAiD,EAAAlD,KAAA,EAAAkD,EAAAjD,KAAA,EAEXC,aAAaC,QAAQjB,GAFV,YAExBoD,EAFwBY,EAAA9C,MAAA,CAAA8C,EAAAjD,KAAA,eAAAiD,EAAAjD,KAAA,EAINI,KAAKI,MAAM6B,GAJL,QAIxBC,EAJwBW,EAAA9C,OAM1BmC,EAAUE,IAAI,SAAAC,GACRA,GACEN,IAASM,EAAKS,UAChBxC,QAAQyC,IAAIV,EAAKS,SACjBd,EAASK,MAVW,OAAAQ,EAAAjD,KAAA,iBAAAiD,EAAAlD,KAAA,GAAAkD,EAAArC,GAAAqC,EAAA,SAiB9BvC,QAAQC,KAAK,uBAAyBsC,EAAArC,GAAMC,SAjBd,yBAAAoC,EAAAnC,SAAAkC,EAAAjC,KAAA,aAAH,gBAAAqC,EAAAC,GAAA,OAAAN,EAAA7B,MAAAH,KAAAI,YAAA,GAoBlBmC,EAAS,eAAAC,EAAAnE,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAgE,EAAMvE,GAAN,OAAAK,EAAAC,EAAAM,KAAA,SAAA4D,GAAA,cAAAA,EAAA1D,KAAA0D,EAAAzD,MAAA,cAAAyD,EAAAzD,KAAA,EACjBC,aAAayD,WAAWzE,GADP,wBAAAwE,EAAA3C,SAAA0C,EAAAzC,SAAH,gBAAA4C,GAAA,OAAAJ,EAAArC,MAAAH,KAAAI,YAAA,GCJTyC,EAA4B,SAACC,EAAsBC,EAAYC,GAU1E,OATArD,QAAQC,KAAK,CACXqD,iBAAkB,CAChBD,YAAaA,EACbE,iBAAkBJ,EAClBK,iBAAkB,UAClBC,YAAa,YACbC,OAAQ,CAACN,MAGN,CACLE,iBAAkB,CAChBD,YAAaA,EACbE,iBAAkBJ,EAClBK,iBAAkB,UAClBC,YAAa,YACbC,OAAQ,CAACN,MCnETO,EAAU,CACdC,eAAgB,mBAChBC,OAAU,oBAMNC,EAAa,eAAArF,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,EAAOgF,EAAMtC,EAAMuC,EAAOX,GAA1B,IAAAY,EAAA,OAAArF,EAAAC,EAAAM,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAChB2E,EAAO,GACRF,GAAQxF,IAETyB,QAAQyC,IAAI,iCACZwB,EAAOf,EAA0BzB,EAAMuC,EAAOX,IAL5BjE,EAAA6B,OAAA,SAObgD,GAPa,wBAAA7E,EAAAgB,SAAArB,EAAAsB,SAAH,gBAAAC,EAAAC,EAAAa,EAAAa,GAAA,OAAAxD,EAAA+B,MAAAH,KAAAI,YAAA,GASbyD,EAAU,SAACH,EAAMtC,EAAMuC,GAC3BhE,QAAQyC,IAAI,wBACZ,IDUoC0B,EAASC,ECVzCH,EAAO,GACX,OAAQF,GACN,KAAKxF,EACH0F,EDdsB,SAACxC,EAAMuC,GAClC,MAAO,CACJK,IAAO,CACLC,GAAM,KACN7C,KAAQA,EACR8C,YAAe,cACfP,MAASA,ICQFQ,CAAa/C,EAAMuC,GAC1B,MACF,KAAKzF,EACH0F,EDPyB,SAACxC,EAAMuC,GACpC,MAAO,CACLS,MAAO,CACLH,GAAI,KACJ7C,KAAMA,EACN8C,YAAa,cACbG,UAAW,OACXC,WAAYX,ICALY,CAAgBnD,EAAMuC,GAC7B,MACF,KAAKzF,EACHyB,QAAQyC,IAAI,2BDCoB0B,ECAH1C,EDAY2C,ECANJ,EDCvChE,QAAQC,KACNP,KAAKC,UAAU,CACbkF,UAAW,CACTpD,KAAM,oBACNqD,IAAKX,EACLY,SAAU,uCACVC,WAAY,KACZZ,SAAUA,MCRZH,EDYG,CACLY,UAAW,CACTpD,KAAM,oBACNqD,IAAKX,EACLY,SAAU,uCACVC,WAAY,KACZZ,SAAUA,ICjBV,MACF,KAAK7F,EACHyB,QAAQyC,IAAI,qCACZwB,EAAOf,EAA0BzB,EAAMuC,GAE3C,OAAOC,GAqCIgB,EAAW,SAACxD,EAAMuC,EAAOD,GACpC/D,QAAQyC,IAAIhB,GACZzB,QAAQyC,IAAIuB,GACZhE,QAAQyC,IAAIsB,GACZ,IAAImB,EAvCS,SAAAnB,GACb,IAAIoB,EAAM,GACV,OAAQpB,GACN,KAAKxF,EACH4G,EAAM,eACN,MACF,KAAK5G,EACH4G,EAAM,iBACN,MACF,KAAK5G,EACH4G,EAAM,oBACN,MACF,KAAK5G,EACH4G,EAAM,2BAGV,OAAOA,EAuBMC,CAAOrB,GAGpB,GAAGA,GAAQxF,EACX,CACA,IAAI8G,EAAI,GACJC,EAAM,EAAGC,EAAM,EAAEC,EAAS,EAE9BC,IAAMC,IAAI,cAAc,CAAC/B,YACxBgC,KAAK,SAAAC,GAMC,IALA5F,QAAQyC,IAAImD,GACZ5F,QAAQyC,IAAImD,EAASjE,KAAKkE,aAAaC,OACvCP,EAAMK,EAASjE,KAAKkE,aAAaC,MAG3BR,EAAMC,GACVF,EAAEU,KAAKH,EAASjE,KAAKkE,aAAaG,UAAUV,GAAKhB,IAGnDgB,GAAU,EAEZtF,QAAQyC,IAAI4C,GACZrF,QAAQyC,IAAI4C,EAAE,IAEfrF,QAAQyC,IAAI,iBAEfwD,MAAM,SAAAC,GACDlG,QAAQyC,IAAI,qCACZzC,QAAQyC,IAAIyD,EAAM/F,WAEvBwF,KAtBDjH,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAsBM,SAAAyC,IAAA,OAAA3C,EAAAC,EAAAM,KAAA,SAAA0C,GAAA,cAAAA,EAAAxC,KAAAwC,EAAAvC,MAAA,OAEDgG,GAAO,EACPE,EAASH,EAAEc,OACXnG,QAAQyC,IAAI4C,GACZrF,QAAQyC,IAAI,mBAAqB+C,GALhC,cAQOF,EAAKE,GARZ,CAAA3D,EAAAvC,KAAA,gBASAU,QAAQyC,IAAI,eAAiB6C,GAC9BtF,QAAQyC,IAAI,eAAiB4C,EAAEC,IAV9BzD,EAAA3B,GAaEuF,IAbF5D,EAAAd,GAcOmE,EAdPrD,EAAAvC,KAAA,GAcqBwE,EAAcC,EAAMtC,EAAMuC,EAAOqB,EAAEC,IAdxD,eAAAzD,EAAAb,GAAAa,EAAApC,KAAAoC,EAAAV,GAc+D,CAC5DwC,WAfH9B,EAAAuE,GAAA,eAAA9E,EAAA5C,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAiBO,SAAA8B,EAAMgF,GAAN,OAAAhH,EAAAC,EAAAM,KAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,cACJU,QAAQyC,IAAI,8BAAgC4C,EAAEC,IAD1CxE,EAAAZ,GAEJF,QAFIc,EAAAxB,KAAA,EAEcsG,EAFd,OAAA9E,EAAAC,GAAAD,EAAArB,KAAAqB,EAAAZ,GAEIuC,IAFJvB,KAAAJ,EAAAZ,GAAAY,EAAAC,IAAA,wBAAAD,EAAAV,SAAAQ,EAAAP,SAjBP,gBAAA6B,GAAA,OAAAZ,EAAAd,MAAAH,KAAAI,YAAA,GAAAoB,EAAAwE,GAqBQ,SAAAH,GACLlG,QAAQyC,IAAI,sBAAwB4C,EAAEC,IACtCtF,QAAQyC,IAAIyD,EAAM/F,UAvBrB0B,EAAAvC,KAAA,GAAAuC,EAAA3B,GAcEoG,KAdFpF,KAAAW,EAAA3B,GAAA2B,EAAAd,GAAAc,EAAAb,GAAAa,EAAAV,IAiBEwE,KAjBF9D,EAAAuE,IAqBEH,MArBFpE,EAAAwE,IAAA,QAAAxE,EAAAvC,KAAA,iCAAAuC,EAAAzB,SAAAmB,EAAAlB,eAqCNoF,IACGa,KAAKpB,EAAQhB,EAAQH,EAAMtC,EAAMuC,GAAQ,CACxCL,YAEDgC,KAAK,SAAAC,GACH5F,QAAQyC,IAAImD,GACZ,IACIW,EADU,iCACMJ,OAAUjB,EAAOiB,OAEtC,GADCnG,QAAQyC,IAAI8D,GACW,MAApBX,EAASY,OAYX,OAAO,KATP,GAFAxG,QAAQyC,IAAI,0BAELsB,GAAQxF,GAAsBwF,GAAQxF,EAAuB,CACpEyB,QAAQyC,IAAImD,EAASjC,QAAQ8C,UAC7B,IAAIzE,EAAO4D,EAASjC,QAAQ8C,SAASC,UAAUH,GAG/C,OAFAvG,QAAQyC,IAAI,SAAWT,GACvB2E,MAAM,0BACC3E,KASV2D,KAAK,SAAA3D,GACAA,GAAMxD,EAAMuF,EDpLO,SAACtC,EAAMuC,EAAOhC,GACzC,MAAO,CAAEP,OAAMuC,QAAOhC,QCmLI4E,CAAcnF,EAAMuC,EAAOhC,MAElDiE,MAAM,SAAAC,GACLlG,QAAQyC,IAAI,kBACZzC,QAAQyC,IAAIyD,EAAM/F,YC1HTkE,cAtDb,SAAAA,EAAYwC,GAAO,IAAAC,EAAA,OAAApI,OAAAqI,EAAA,EAAArI,CAAA2B,KAAAgE,IACjByC,EAAApI,OAAAsI,EAAA,EAAAtI,CAAA2B,KAAA3B,OAAAuI,EAAA,EAAAvI,CAAA2F,GAAAnD,KAAAb,KAAMwG,KACDK,MAAQ,CAAEzF,KAAM,GAAIuC,MAAO,IAChC8C,EAAKK,aAAeL,EAAKK,aAAaC,KAAlB1I,OAAA2I,EAAA,EAAA3I,CAAAoI,IAHHA,4EAMNQ,GACXA,EAAMC,iBACNtC,EAAS5E,KAAK6G,MAAMzF,KAAMpB,KAAK6G,MAAMlD,MAAOzF,oCAGrC,IAAAiJ,EAAAnH,KACP,OAECoH,EAAA5I,EAAA6I,cAAA,QAAMC,SAAU,SAACL,GAAD,OAASE,EAAKL,aAAaG,KAExCG,EAAA5I,EAAA6I,cAAA,iBACAD,EAAA5I,EAAA6I,cAAA,2DAEAD,EAAA5I,EAAA6I,cAAA,WACAD,EAAA5I,EAAA6I,cAAA,WAEAD,EAAA5I,EAAA6I,cAAA,qBAEED,EAAA5I,EAAA6I,cAAA,SACEjG,KAAK,UACLlD,KAAK,SACLyF,MAAO3D,KAAK6G,MAAMzF,KAClBmG,SAAU,SAAAnG,GAAI,OAAI+F,EAAKK,SAAS,CAAEpG,KAAMA,EAAKqG,OAAO9D,WAEtDyD,EAAA5I,EAAA6I,cAAA,WACAD,EAAA5I,EAAA6I,cAAA,WACAD,EAAA5I,EAAA6I,cAAA,WAVF,aAYED,EAAA5I,EAAA6I,cAAA,SACEjG,KAAK,SACLlD,KAAK,SACLyF,MAAO3D,KAAK6G,MAAMlD,MAElB4D,SAAU,SAAA5D,GAAK,OAAIwD,EAAKK,SAAS,CAAE7D,MAAOA,EAAM8D,OAAO9D,YAG3DyD,EAAA5I,EAAA6I,cAAA,WACAD,EAAA5I,EAAA6I,cAAA,WACAD,EAAA5I,EAAA6I,cAAA,WAEAD,EAAA5I,EAAA6I,cAAA,SAAOnJ,KAAK,SAASyF,MAAM,WAC3ByD,EAAA5I,EAAA6I,cAAA,UAAQK,QAAS,SAACT,GAAWA,EAAMC,iBACjC3E,EAAUrE,KADZ,yBAhDUyJ,IAAMC,WCkDTxD,cAnDb,SAAAA,EAAYoC,GAAO,IAAAC,EAAA,OAAApI,OAAAqI,EAAA,EAAArI,CAAA2B,KAAAoE,IACjBqC,EAAApI,OAAAsI,EAAA,EAAAtI,CAAA2B,KAAA3B,OAAAuI,EAAA,EAAAvI,CAAA+F,GAAAvD,KAAAb,KAAMwG,KACDK,MAAQ,CAAEzF,KAAM,GAAIuC,MAAO,IAEhC8C,EAAKK,aAAeL,EAAKK,aAAaC,KAAlB1I,OAAA2I,EAAA,EAAA3I,CAAAoI,IAJHA,4EAONQ,GACXA,EAAMC,iBACNtC,EAAS5E,KAAK6G,MAAMzF,KAAMpB,KAAK6G,MAAMlD,MAAOzF,oCAGrC,IAAAiJ,EAAAnH,KACP,OACAoH,EAAA5I,EAAA6I,cAAA,QAAMC,SAAU,SAACL,GAAD,OAASE,EAAKL,aAAaG,KACvCG,EAAA5I,EAAA6I,cAAA,mBACAD,EAAA5I,EAAA6I,cAAA,yEACAD,EAAA5I,EAAA6I,cAAA,WACAD,EAAA5I,EAAA6I,cAAA,WACAD,EAAA5I,EAAA6I,cAAA,qBAEED,EAAA5I,EAAA6I,cAAA,SACEjG,KAAK,YACLlD,KAAK,SACLyF,MAAO3D,KAAK6G,MAAMgB,UAClBN,SAAU,SAAAnG,GAAI,OAAI+F,EAAKK,SAAS,CAAEpG,KAAMA,EAAKqG,OAAO9D,WAEtDyD,EAAA5I,EAAA6I,cAAA,WACAD,EAAA5I,EAAA6I,cAAA,WACAD,EAAA5I,EAAA6I,cAAA,WAVF,iBAYED,EAAA5I,EAAA6I,cAAA,WACAD,EAAA5I,EAAA6I,cAAA,WACAD,EAAA5I,EAAA6I,cAAA,YACEjG,KAAK,eACL0G,KAAK,KACLC,KAAK,KACLpE,MAAO3D,KAAK6G,MAAMmB,aAClBT,SAAU,SAAA5D,GAAK,OAAIwD,EAAKK,SAAS,CAAE7D,MAAOA,EAAM8D,OAAO9D,YAG3DyD,EAAA5I,EAAA6I,cAAA,WACAD,EAAA5I,EAAA6I,cAAA,WACAD,EAAA5I,EAAA6I,cAAA,SAAOnJ,KAAK,SAASyF,MAAM,SAC3ByD,EAAA5I,EAAA6I,cAAA,UAAQK,QAAS,SAACT,GAAWA,EAAMC,iBACjC3E,EAAUrE,KADZ,4BA7CYyJ,IAAMC,WCwJXK,cArJb,SAAAA,EAAYzB,GAAO,IAAAC,EAAA,OAAApI,OAAAqI,EAAA,EAAArI,CAAA2B,KAAAiI,IACjBxB,EAAApI,OAAAsI,EAAA,EAAAtI,CAAA2B,KAAA3B,OAAAuI,EAAA,EAAAvI,CAAA4J,GAAApH,KAAAb,KAAMwG,KAGRK,MAAQ,CACNqB,sBAAuB,SACvBC,0BAA2B,SAC3BC,0BAA2B,GAC3BC,8BAA+B,GAC/BC,cAAe,GACfC,kBAAmB,IARnB9B,EAAKK,aAAeL,EAAKK,aAAaC,KAAlB1I,OAAA2I,EAAA,EAAA3I,CAAAoI,IAFHA,4EAYNtF,EAAWQ,GACtB,OAAQR,GACN,KAAKjD,EACH8B,KAAKwH,SAAS,CAAEY,0BAA2BzG,IAC3C,MACF,KAAKzD,EACH8B,KAAKwH,SAAS,CAAEa,8BAA+B1G,wDAI1BuG,GACzBlI,KAAKwH,SAAS,CAAEU,0BAChBvI,QAAQyC,IAAI,MAEZzC,QAAQyC,IAAI/C,KAAKC,UAAU4I,IAC3BlH,EACE9C,EACAgK,EACAlI,KAAKwI,aAAazB,KAAK/G,8DAGImI,GAC7BnI,KAAKwH,SAAS,CAAEW,8BAChBxI,QAAQyC,IAAI/C,KAAKC,UAAU6I,IAC3BnH,EACE9C,EACAiK,EACAnI,KAAKwI,aAAazB,KAAK/G,mDAGP,IAAAmH,EAAAnH,KAClBK,EAAWnC,GAAaoH,KAAxB,eAAAlH,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAA6B,SAAAC,EAAMgD,GAAN,OAAAnD,EAAAC,EAAAM,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACvByC,GACFyF,EAAKK,SAAS,CAAEc,cAAe5G,IAFN,wBAAA3C,EAAAgB,SAAArB,EAAAsB,SAA7B,gBAAAC,GAAA,OAAA7B,EAAA+B,MAAAH,KAAAI,YAAA,IAKAC,EAAWnC,GAAiBoH,KAA5B,eAAAhF,EAAAjC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAiC,SAAA8B,EAAMmB,GAAN,OAAAnD,EAAAC,EAAAM,KAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,OAC3ByC,GACFyF,EAAKK,SAAS,CAAEe,kBAAmB7G,IAFN,wBAAAjB,EAAAV,SAAAQ,EAAAP,SAAjC,gBAAAE,GAAA,OAAAI,EAAAH,MAAAH,KAAAI,YAAA,yCAOW6G,GJ3DiB,IAC9BiB,EACAE,EACAD,EACAE,GIwDEpB,EAAMC,iBAE8B,WAArClH,KAAK6G,MAAMqB,uBAImC,WAAzClI,KAAK6G,MAAMsB,2BAKnBxI,QAAQyC,IAAI/C,KAAKC,UAAUU,KAAK6G,MAAMqB,wBACtCvI,QAAQyC,IAAI/C,KAAKC,UAAUU,KAAK6G,MAAMuB,4BACtCzI,QAAQyC,IAAI/C,KAAKC,UAAUU,KAAK6G,MAAMsB,4BACtCxI,QAAQyC,IAAI/C,KAAKC,UAAUU,KAAK6G,MAAMwB,gCAClClK,EACED,GJ3EJgK,EI6EMlI,KAAK6G,MAAMqB,sBJ5EjBE,EI6EMpI,KAAK6G,MAAMuB,0BJ5EjBD,EI6EMnI,KAAK6G,MAAMsB,0BJ5EjBE,EI6EMrI,KAAK6G,MAAMwB,8BJ3EV,CACLlG,QAAS+F,EACThF,iBAAkBkF,EAClBK,YAAaN,EACb9E,OAAQgF,MIyDV/B,MAAM,qCAJNA,MAAM,kEAuBG,IAAAoC,EAAA1I,KAEP,OACEoH,EAAA5I,EAAA6I,cAAA,QAAMC,SAAU,SAACL,GAAD,OAASyB,EAAK5B,aAAaG,KACzCG,EAAA5I,EAAA6I,cAAA,uBACAD,EAAA5I,EAAA6I,cAAA,gDACAD,EAAA5I,EAAA6I,cAAA,WACAD,EAAA5I,EAAA6I,cAAA,WACAD,EAAA5I,EAAA6I,cAAA,WACAD,EAAA5I,EAAA6I,cAAA,4BAEED,EAAA5I,EAAA6I,cAAA,UACEjG,KAAK,cACLuC,MAAO3D,KAAK6G,MAAMqB,sBAClBX,SAAU,SAAAnG,GAAI,OACZsH,EAAKC,2BAA2BvH,EAAKqG,OAAO9D,SAGhDyD,EAAA5I,EAAA6I,cAAA,UAAQ1D,MAAO,UAAf,UAEG3D,KAAK6G,MAAMyB,eACVtI,KAAK6G,MAAMyB,cAAcxC,OAAS,GAClC9F,KAAK6G,MAAMyB,cAAc7G,IAAI,SAACC,EAAMwE,GAClC,OACEkB,EAAA5I,EAAA6I,cAAA,UAAQuB,IAAK1C,EAAM2C,WAAYlF,MAAOjC,EAAKN,MACxCM,EAAKN,UAtBpB,mBA6BEgG,EAAA5I,EAAA6I,cAAA,8BAEED,EAAA5I,EAAA6I,cAAA,UACEjG,KAAK,gBACLuC,MAAO3D,KAAK6G,MAAMsB,0BAClBZ,SAAU,SAAAnG,GAAI,OACZsH,EAAKI,+BAA+B1H,EAAKqG,OAAO9D,SAGlDyD,EAAA5I,EAAA6I,cAAA,UAAQ1D,MAAO,UAAf,UACC3D,KAAK6G,MAAM0B,mBACVvI,KAAK6G,MAAM0B,kBAAkBzC,OAAS,GACtC9F,KAAK6G,MAAM0B,kBAAkB9G,IAAI,SAACC,EAAMwE,GACtC,OACEkB,EAAA5I,EAAA6I,cAAA,UAAQuB,IAAK1C,EAAM2C,WAAYlF,MAAOjC,EAAKN,MACxCM,EAAKN,UAMlBgG,EAAA5I,EAAA6I,cAAA,WACAD,EAAA5I,EAAA6I,cAAA,WACAD,EAAA5I,EAAA6I,cAAA,WACAD,EAAA5I,EAAA6I,cAAA,WACAD,EAAA5I,EAAA6I,cAAA,WACAD,EAAA5I,EAAA6I,cAAA,WACAD,EAAA5I,EAAA6I,cAAA,SAAOnJ,KAAK,SAASyF,MAAM,SAC3ByD,EAAA5I,EAAA6I,cAAA,UAAQK,QAAS,SAACT,GAAWA,EAAMC,iBACjC3E,EAAUrE,KADZ,yBA/IcyJ,IAAMC,oCC+BbmB,mLA5BX,OACI3B,EAAA5I,EAAA6I,cAAA,cACCD,EAAA5I,EAAA6I,cAAA,OAAK2B,UAAU,cACd5B,EAAA5I,EAAA6I,cAAA,OAAK4B,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC/B,EAAA5I,EAAA6I,cAAA,oCAEAD,EAAA5I,EAAA6I,cAAA,WACAD,EAAA5I,EAAA6I,cAAA,UACAD,EAAA5I,EAAA6I,cAAA,MAAI2B,UAAU,SACd5B,EAAA5I,EAAA6I,cAAC+B,EAAA,EAAD,CAAMC,GAAG,QAAT,yCAEAjC,EAAA5I,EAAA6I,cAAA,UACAD,EAAA5I,EAAA6I,cAAC+B,EAAA,EAAD,CAAMC,GAAG,UAAT,2CAEAjC,EAAA5I,EAAA6I,cAAA,UACAD,EAAA5I,EAAA6I,cAAC+B,EAAA,EAAD,CAAMC,GAAG,YAAT,6CAEAjC,EAAA5I,EAAA6I,cAAA,MAAI2B,UAAU,QACd5B,EAAA5I,EAAA6I,cAAC+B,EAAA,EAAD,CAAMC,GAAG,kBAAT,qBApBWzB,aCMN0B,mLATT,OACGlC,EAAA5I,EAAA6I,cAAA,OAAK2B,UAAU,YACZ5B,EAAA5I,EAAA6I,cAAA,qDAJWM,IAAMC,WC+Hd2B,cAvHb,SAAAA,EAAY/C,GAAO,IAAAC,EAAA,OAAApI,OAAAqI,EAAA,EAAArI,CAAA2B,KAAAuJ,IACjB9C,EAAApI,OAAAsI,EAAA,EAAAtI,CAAA2B,KAAA3B,OAAAuI,EAAA,EAAAvI,CAAAkL,GAAA1I,KAAAb,KAAMwG,KAIRK,MAAQ,CACN2C,oBAAqB,SACrBC,gBAAiB,GACjBC,SAAU,GACVC,UAAW,GACXvB,0BAA2B,GAC3BC,8BAA+B,IAT/B5B,EAAKK,aAAeL,EAAKK,aAAaC,KAAlB1I,OAAA2I,EAAA,EAAA3I,CAAAoI,IAFHA,0EAaRgD,GACT9J,QAAQyC,IAAI,qBACZpC,KAAKwH,SAAS,CAAEiC,oBAChB9J,QAAQyC,IAAI,oBAAsB/C,KAAKC,UAAUmK,iDAE9BD,GACnBxJ,KAAKwH,SAAS,CAAEgC,wBAEhBzH,EACEyH,EACAxJ,KAAK4J,WAAW7C,KAAK/G,oDAIJ,IAAAmH,EAAAnH,KACnBK,EAAWnC,GAAkBoH,KAA7B,eAAAlH,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAkC,SAAAC,EAAMgL,GAAN,OAAAnL,EAAAC,EAAAM,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAC5ByK,GACFvC,EAAKK,SAAS,CAAEkC,aAFc,wBAAA3K,EAAAgB,SAAArB,EAAAsB,SAAlC,gBAAAC,GAAA,OAAA7B,EAAA+B,MAAAH,KAAAI,YAAA,yCAMW6G,GAAO,IAAAyB,EAAA1I,KAEoB,WAAnCA,KAAK6G,MAAM2C,qBAId7J,QAAQyC,IAAI,mBAAqB/C,KAAKC,UAAUU,KAAK6G,MAAM4C,kBAC3D9J,QAAQyC,IAAI,uBAAyBpC,KAAK6G,MAAM2C,qBAChD7J,QAAQyC,IAAI,oBAAsBpC,KAAK6G,MAAM4C,gBAAgBvG,kBAC7D+D,EAAMC,iBAEPtC,EACG5E,KAAK6G,MAAM4C,gBAAgBvG,iBAC3BlD,KAAK6G,MAAM8C,UACXzL,GAEF2L,WAAW,WAAQjF,EACjB8D,EAAK7B,MAAM4C,gBAAgBvG,iBAC3BwF,EAAK7B,MAAM4C,gBAAgBpG,OAC3BnF,IACI,MAjBJoI,MAAM,kEAuBD,IAAAwD,EAAA9J,KACP,OACEoH,EAAA5I,EAAA6I,cAAA,QAAMC,SAAU,SAACL,GAAD,OAAS6C,EAAKhD,aAAaG,KACzCG,EAAA5I,EAAA6I,cAAA,0BACAD,EAAA5I,EAAA6I,cAAA,wDACAD,EAAA5I,EAAA6I,cAAA,WACAD,EAAA5I,EAAA6I,cAAA,WACAD,EAAA5I,EAAA6I,cAAA,WACAD,EAAA5I,EAAA6I,cAAA,4BAEED,EAAA5I,EAAA6I,cAAA,UACEjG,KAAK,cACLuC,MAAO3D,KAAK6G,MAAM2C,oBAClBjC,SAAU,SAAAiC,GAAmB,OAC3BM,EAAKC,qBAAqBP,EAAoB/B,OAAO9D,SAGzDyD,EAAA5I,EAAA6I,cAAA,UAAQ1D,MAAO,UAAf,UACG3D,KAAK6G,MAAM6C,UACV1J,KAAK6G,MAAM6C,SAAS5D,OAAS,GAC7B9F,KAAK6G,MAAM6C,SAASjI,IAAI,SAACC,EAAMwE,GAC/B,GAAIxE,EAAKS,QACP,OACEiF,EAAA5I,EAAA6I,cAAA,UAAQuB,IAAK1C,EAAM2C,WAAYlF,MAAOjC,EAAKS,SACxCT,EAAKS,aAtBpB,2BA6BEiF,EAAA5I,EAAA6I,cAAA,iDAEED,EAAA5I,EAAA6I,cAAA,SACEjG,KAAK,UACLlD,KAAK,SACLyF,MAAO3D,KAAK6G,MAAMmD,QAClBzC,SAAU,SAAAoC,GAAS,OACjBG,EAAKtC,SAAS,CAAEmC,UAAWA,EAAUlC,OAAO9D,WAGhDyD,EAAA5I,EAAA6I,cAAA,WACAD,EAAA5I,EAAA6I,cAAA,WACAD,EAAA5I,EAAA6I,cAAA,YAEFD,EAAA5I,EAAA6I,cAAA,SAAOnJ,KAAK,SAASyF,MAAM,WAC3ByD,EAAA5I,EAAA6I,cAAA,UACEK,QAAS,SAACT,GACRA,EAAMC,iBACNhI,aAAa+K,UAHjB,qBA3GoBtC,IAAMC,WCmCnBsC,mLAzBX,OACE9C,EAAA5I,EAAA6I,cAAC8C,EAAA,EAAD,KACA/C,EAAA5I,EAAA6I,cAAA,OAAK2B,UAAU,OAEb5B,EAAA5I,EAAA6I,cAAC+C,EAAD,MAEEhD,EAAA5I,EAAA6I,cAACgD,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWlB,IACjClC,EAAA5I,EAAA6I,cAACgD,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,OAAOC,UAAWxG,IACpCoD,EAAA5I,EAAA6I,cAACgD,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAWpG,IACtCgD,EAAA5I,EAAA6I,cAACgD,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,WAAWC,UAAWvC,IACxCb,EAAA5I,EAAA6I,cAACgD,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,iBAAiBC,UAAWjB,aAZtC3B,aCNE6C,QACW,cAA7BC,OAAOtE,SAASuE,UAEe,UAA7BD,OAAOtE,SAASuE,UAEhBD,OAAOtE,SAASuE,SAASC,MACvB,2DCZNC,IAASC,OAAO1D,EAAA5I,EAAA6I,cAAC0D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9F,KAAK,SAAA+F,GACjCA,EAAaC","file":"static/js/main.06b1fdec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const type = {\n  typeSG: \"SecurityGroup\",\n  typeSGACLs: \"SecurityGroupACLs\",\n  typeMapping: \"MappingSGT_SGACLs\",\n  typeMatrixCell: \"egressMatrixCell\"\n};\n","// import { AsyncStorage } from \"react\";\nimport { type } from \"../utils/Type\";\n\nexport const store = async (type, newObject) => {\n  try {\n    const oldArray = await localStorage.getItem(type);\n    let mergedArray = oldArray\n      ? JSON.stringify([...JSON.parse(oldArray), newObject])\n      : JSON.stringify([newObject]);\n    await localStorage.setItem(type, mergedArray);\n    console.warn(type + \"->\", mergedArray);\n  } catch (error) {\n    console.warn(\"Writing->\" + error.message);\n  }\n};\n\nexport const getStorage = async type => {\n  try {\n    const myArray = await localStorage.getItem(type);\n    if ((await myArray) !== null) {\n      return JSON.parse(await myArray);\n    } else return {};\n  } catch (error) {\n    console.warn(\"Reading->\" + error.message);\n  }\n};\nexport const getSetUUID = async (valueType, name, callBack) => {\n  try {\n    const data = await localStorage.getItem(valueType);\n    if (data) {\n      let dataArray = await JSON.parse(data);\n      if (dataArray) {\n        dataArray.map(item => {\n          if (item) {\n            if (name === item.name) {\n              callBack(valueType, item.uuid);\n            }\n          }\n        });\n      }\n    }\n  } catch (error) {\n    console.warn(\"Error Reading UUID->\" + error.message);\n  }\n};\nexport const getSelectedMapping = async (name, callBack) => {\n  try {\n    const data = await localStorage.getItem(type.typeMapping);\n    if (data) {\n      let dataArray = await JSON.parse(data);\n      if (dataArray) {\n        dataArray.map(item => {\n          if (item) {\n            if (name === item.sgtName) {\n              console.log(item.sgtName);\n              callBack(item);\n            }\n          }\n        });\n      }\n    }\n  } catch (error) {\n    console.warn(\"Error Reading UUID->\" + error.message);\n  }\n};\nexport const clearData = async type => {\n  await localStorage.removeItem(type);\n};\n","export const dataFormatter = (name, value, uuid) => {\n  return { name, value, uuid };\n};\n\nexport const mappingFormatter = (\n  selectedSecurityGroup,\n  selectedSecurityGroupUUID,\n  selectedSecurityGroupACLs,\n  selectedSecurityGroupACLsUUID\n) => {\n  return {\n    sgtName: selectedSecurityGroup,  //selectedSecurityGroup+\" -> \"+selectedSecurityGroupACLs,\n    destinationSgtId: selectedSecurityGroupUUID,\n    sgtACLsName: selectedSecurityGroupACLs,\n    sgacls: selectedSecurityGroupACLsUUID\n  };\n};\n\nexport const sgtFormatter = (name, value) => {\n return {\n    \"Sgt\": {\n      \"id\": \"id\",\n      \"name\": name,\n      \"description\": \"description\",\n      \"value\": value\n    }\n  };\n};\nexport const sgACLsFormatter = (name, value) => {\n  return {\n    Sgacl: {\n      id: \"id\",\n      name: name,\n      description: \"description\",\n      ipVersion: \"IPV4\",\n      aclcontent: value\n    }\n  };\n};\nexport const ipSGTMappingFormatter = (sgtUUID, hostName) => {\n  console.warn(\n    JSON.stringify({\n      SGMapping: {\n        name: \"server1.cisco.com\",\n        sgt: sgtUUID,\n        deployTo: \"e392a480-3d05-11e9-b9b4-a68f2a82a759\",\n        deployType: \"ND\",\n        hostName: hostName\n      }\n    })\n  );\n  return {\n    SGMapping: {\n      name: \"server1.cisco.com\",\n      sgt: sgtUUID,\n      deployTo: \"e392a480-3d05-11e9-b9b4-a68f2a82a759\",\n      deployType: \"ND\",\n      hostName: hostName\n    }\n  };\n};\nexport const egressmatrixcellFormatter = (destinationSgtIdUUID, sgaclsUUID, sourceSgtId) => {\n  console.warn({\n    EgressMatrixCell: {\n      sourceSgtId: sourceSgtId,  //id for ww2\n      destinationSgtId: destinationSgtIdUUID,\n      matrixCellStatus: \"MONITOR\",\n      defaultRule: \"PERMIT_IP\",\n      sgacls: [sgaclsUUID]\n    }\n  });\n  return {\n    EgressMatrixCell: {\n      sourceSgtId: sourceSgtId,  //id for ww2\n      destinationSgtId: destinationSgtIdUUID,\n      matrixCellStatus: \"MONITOR\",\n      defaultRule: \"PERMIT_IP\",\n      sgacls: [sgaclsUUID]\n    }\n  };\n};\n\n/*\nexport const egressmatrixcellFormatter = (destinationSgtIdUUID, sgaclsUUID) => {\n  console.warn({\n    EgressMatrixCell: {\n      sourceSgtId: \"a70f8fa0-3d00-11e9-b9b4-a68f2a82a759\",  //id for ww2\n      destinationSgtId: destinationSgtIdUUID,\n      matrixCellStatus: \"MONITOR\",\n      defaultRule: \"PERMIT_IP\",\n      sgacls: [sgaclsUUID]\n    }\n  });\n  return {\n    EgressMatrixCell: {\n      sourceSgtId: \"a70f8fa0-3d00-11e9-b9b4-a68f2a82a759\",  //id for ww2\n      destinationSgtId: destinationSgtIdUUID,\n      matrixCellStatus: \"MONITOR\",\n      defaultRule: \"PERMIT_IP\",\n      sgacls: [sgaclsUUID]\n    }\n  };\n};\n*/\n","import axios from \"axios\";\nimport { store } from \"../storage/asyncStorage\";\nimport { type } from \"../utils/Type\";\nimport {\n  dataFormatter,\n  ipSGTMappingFormatter,\n  egressmatrixcellFormatter,\n  sgtFormatter,\n  sgACLsFormatter\n} from \"../model/DataFormatter\";\nconst headers = {\n  \"Content-Type\": \"application/json\",\n  \"Accept\": \"application/json\"\n  /* auth: {\n      username: \"soumya.sethy\",\n      password: \"password\"\n    }*/\n};\nconst getBodyEgress = async (TYPE, name, value, sourceSgtId) => {\n  let body = {};\n  if(TYPE == type.typeMatrixCell)\n  {\n    console.log(\"Type getBodyEgress called now\");\n    body = egressmatrixcellFormatter(name, value, sourceSgtId);\n  }\n  return body;\n}\nconst getBody = (TYPE, name, value) => {\n  console.log(\"Recieved Body Req...\");\n  let body = {};\n  switch (TYPE) {\n    case type.typeSG:\n      body = sgtFormatter(name, value);\n      break;\n    case type.typeSGACLs:\n      body = sgACLsFormatter(name, value);\n      break;\n    case type.typeMapping:\n      console.log(\"Type mapping called now\");\n      body = ipSGTMappingFormatter(name, value);\n      break;\n    case type.typeMatrixCell:\n      console.log(\"Type matrixcell/egress called now\");\n      body = egressmatrixcellFormatter(name, value);\n  }\n  return body;\n};\nconst getURL = TYPE => {\n  var URL = \"\";\n  switch (TYPE) {\n    case type.typeSG:\n      URL = \"/config/sgt/\";\n      break;\n    case type.typeSGACLs:\n      URL = \"/config/sgacl/\";\n      break;\n    case type.typeMapping:\n      URL = \"/config/sgmapping\";\n      break;\n    case type.typeMatrixCell:\n      URL = \"/config/egressmatrixcell\";\n      break;\n  }\n  return URL;\n};\n/*\nconst postEgressFunction = (TYPE, name, value, sourcesgt) {\n  console.log(\"Inside called function b[itr]=\" + sourcesgt);\n  axios\n       .post(subUrl, getBodyEgress(TYPE, name, value, sourcesgt), {\n         headers\n       })\n       .then(response => {\n          console.log(\"Successfully posted for -> \" + b[itr]);\n          console.log(response);\n        })\n      .catch(error => {\n        console.log(\"Error happened for \" + b[itr]);\n        console.log(error.message);\n      })\n};\n*/\nexport const postData = (name, value, TYPE) => {\n  console.log(name);\n  console.log(value);\n  console.log(TYPE);\n  var subUrl = getURL(TYPE);\n\n  //Temporary code for geting all sgt\n  if(TYPE == type.typeMatrixCell)\n  {\n  var b = [];\n  var itr = 0, len = 0,arrLen = 0;\n  //Get all sgts to be filled in source SGT field\n  axios.get(\"/config/sgt\",{headers})\n  .then(response => {\n         console.log(response);\n         console.log(response.data.SearchResult.total);\n         len = response.data.SearchResult.total;\n\n\n         while(itr < len){\n           b.push(response.data.SearchResult.resources[itr].id);\n\n      //   console.log(response.data.SearchResult.resources[itr].id);\n         itr = itr+1;\n       }\n       console.log(b);\n       console.log(b[0]);\n\n  \t   console.log(\"Successfull\");\n     })\n  .catch(error => {\n        console.log(\"Error happened while sgt fetching\");\n        console.log(error.message);\n      })\n  .then(async () => {\n       // always executed\n       itr = -1;\n       arrLen = b.length;\n       console.log(b);\n       console.log(\"Array length Now\" + arrLen);\n     //  console.log(\"Length Now\" + len);\n       //Traverse the array and send post request\n       while(++itr< arrLen)\n       {console.log(\"Itr value = \" + itr);\n       console.log(\"Itr value = \" + b[itr]);\n\n    //   setTimeout(postEgressFunction(TYPE, name, value, b[itr]), 1000);\n    await axios\n         .post(subUrl, await getBodyEgress(TYPE, name, value, b[itr]), {\n           headers\n         })\n         .then(async response => {\n           console.log(\"Successfully posted for -> \" + b[itr]);\n           console.log(await response);\n         })\n         .catch(error => {\n           console.log(\"Error happened for \" + b[itr]);\n           console.log(error.message);\n         });\n       }\n    //   itr = 0;\n    //   arrLen = 0;\n     });\n\n\n\n  } //End of If\n  //Apart from egress matrix cell\nelse{\n\n\n  axios\n    .post(subUrl, getBody(TYPE, name, value), {\n      headers\n    })\n    .then(response => {\n       console.log(response);\n       var baseUrl = \"https://10.197.65.245:9060/ers\";\n       var index = baseUrl.length + (subUrl.length);\n       console.log(index);\n      if (response.status === 201) {\n        console.log(\"Data sent successfully\");\n        //For 3rd and 4th page no need to process for uuid\n        if(!( (TYPE == type.typeMapping) || (TYPE == type.typeMatrixCell))) {\n        console.log(response.headers.location);\n        var uuid = response.headers.location.substring(index);  //let uuid = response.data.uuid;\n        console.log(\"UUID->\" + uuid);\n        alert(\"data Sent Successfully\");\n        return uuid;\n        }\n      }\n      else {\n        return null;\n      }\n\n\n    })\n    .then(uuid => {\n      if (uuid) store(TYPE, dataFormatter(name, value, uuid));\n    })\n    .catch(error => {\n      console.log(\"Error happened\");\n      console.log(error.message);\n    });\n\n  }\n};\n","// eslint-disable-next-line\r\nimport React from \"react\";\r\nimport { postData } from \"../network/API\";\r\nimport { type } from \"../utils/Type\";\r\nimport { clearData } from \"../storage/asyncStorage\";\r\nvar a = [];\r\n\r\nclass Sgt extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { name: \"\", value: \"\" };\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    postData(this.state.name, this.state.value, type.typeSG);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n\r\n     <form onSubmit={(event)=>this.handleSubmit(event)}>\r\n\r\n        <h2>SGT</h2>\r\n        <p>This is SGT Page.Here inputs will be Tag name.</p>\r\n\r\n        <br />\r\n        <br />\r\n\r\n        <label>\r\n          Name:\r\n          <input\r\n            name=\"sgtName\"\r\n            type=\"string\"\r\n            value={this.state.name}\r\n            onChange={name => this.setState({ name: name.target.value })}\r\n          />\r\n          <br />\r\n          <br />\r\n          <br />\r\n          Tag Value:\r\n          <input\r\n            name=\"sgtTag\"\r\n            type=\"number\"\r\n            value={this.state.value}\r\n            // onChange={this.handleInputChange}\r\n            onChange={value => this.setState({ value: value.target.value })}\r\n          />\r\n        </label>\r\n        <br />\r\n        <br />\r\n        <br />\r\n\r\n        <input type=\"Submit\" value=\"Submit\" />\r\n        <button onClick={(event) => {event.preventDefault();\r\n          clearData(type.typeSG);}}>RESET SG DATA</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Sgt;\r\n","import React from \"react\";\r\nimport { type } from \"../utils/Type\";\r\nimport { postData } from \"../network/API\";\r\nimport { clearData } from \"../storage/asyncStorage\";\r\n\r\nclass Sgacl extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { name: \"\", value: \"\" };\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    postData(this.state.name, this.state.value, type.typeSGACLs);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n    <form onSubmit={(event)=>this.handleSubmit(event)}>\r\n        <h2>SGACL</h2>\r\n        <p>This is SGACL Page.Here inputs will be name and ACL content.</p>\r\n        <br />\r\n        <br />\r\n        <label>\r\n          Name:\r\n          <input\r\n            name=\"sgaclName\"\r\n            type=\"string\"\r\n            value={this.state.sgaclName}\r\n            onChange={name => this.setState({ name: name.target.value })}\r\n          />\r\n          <br />\r\n          <br />\r\n          <br />\r\n          SGACL Content:\r\n          <br />\r\n          <br />\r\n          <textarea\r\n            name=\"sgaclContent\"\r\n            rows=\"10\"\r\n            cols=\"50\"\r\n            value={this.state.sgaclContent}\r\n            onChange={value => this.setState({ value: value.target.value })}\r\n          />\r\n        </label>\r\n        <br />\r\n        <br />\r\n        <input type=\"Submit\" value=\"Push\" />\r\n        <button onClick={(event) => {event.preventDefault();\r\n          clearData(type.typeSGACLs);}}>RESET SGACL DATA</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Sgacl;\r\n","// eslint-disable-next-line\r\nimport React, { Component } from \"react\";\r\nimport { type } from \"../utils/Type\";\r\nimport { getStorage, getSetUUID } from \"../storage/asyncStorage\";\r\nimport { store, clearData } from \"../storage/asyncStorage\";\r\nimport { mappingFormatter } from \"../model/DataFormatter\";\r\n\r\nclass Mapping extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n  state = {\r\n    selectedSecurityGroup: \"Select\",\r\n    selectedSecurityGroupACLs: \"Select\",\r\n    selectedSecurityGroupUUID: \"\",\r\n    selectedSecurityGroupACLsUUID: \"\",\r\n    SecurityGroup: [],\r\n    SecurityGroupACLs: []\r\n  };\r\n  setUUIDValue(valueType, uuid) {\r\n    switch (valueType) {\r\n      case type.typeSG:\r\n        this.setState({ selectedSecurityGroupUUID: uuid });\r\n        break;\r\n      case type.typeSGACLs:\r\n        this.setState({ selectedSecurityGroupACLsUUID: uuid });\r\n        break;\r\n    }\r\n  }\r\n  onValueChangeSecurityGroup(selectedSecurityGroup) {\r\n    this.setState({ selectedSecurityGroup });\r\n    console.log(\"Hi\");\r\n\r\n    console.log(JSON.stringify(selectedSecurityGroup));\r\n    getSetUUID(\r\n      type.typeSG,\r\n      selectedSecurityGroup,\r\n      this.setUUIDValue.bind(this)\r\n    );\r\n  }\r\n  onValueChangeSecurityGroupACLs(selectedSecurityGroupACLs) {\r\n    this.setState({ selectedSecurityGroupACLs });\r\n    console.log(JSON.stringify(selectedSecurityGroupACLs));\r\n    getSetUUID(\r\n      type.typeSGACLs,\r\n      selectedSecurityGroupACLs,\r\n      this.setUUIDValue.bind(this)\r\n    );\r\n  }\r\n  componentDidMount() {\r\n    getStorage(type.typeSG).then(async item => {\r\n      if (item) {\r\n        this.setState({ SecurityGroup: item });\r\n      }\r\n    });\r\n    getStorage(type.typeSGACLs).then(async item => {\r\n      if (item) {\r\n        this.setState({ SecurityGroupACLs: item });\r\n      }\r\n    });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\nif(this.state.selectedSecurityGroup === \"Select\"){\r\n  alert(\"Please Select a SecurityGroup\");\r\n  return;\r\n}\r\nelse if(this.state.selectedSecurityGroupACLs === \"Select\"){\r\n  alert(\"Please Select a SecurityGroupACLs\");\r\n  return;\r\n}\r\n\r\nconsole.log(JSON.stringify(this.state.selectedSecurityGroup));\r\nconsole.log(JSON.stringify(this.state.selectedSecurityGroupUUID));\r\nconsole.log(JSON.stringify(this.state.selectedSecurityGroupACLs));\r\nconsole.log(JSON.stringify(this.state.selectedSecurityGroupACLsUUID));\r\n    store(\r\n      type.typeMapping,\r\n      mappingFormatter(\r\n        this.state.selectedSecurityGroup,\r\n        this.state.selectedSecurityGroupUUID,\r\n        this.state.selectedSecurityGroupACLs,\r\n        this.state.selectedSecurityGroupACLsUUID\r\n      )\r\n    );\r\n  }\r\n\r\n  render() {\r\n    // console.log(\"State->\" + JSON.stringify(this.state));\r\n    return (\r\n      <form onSubmit={(event)=>this.handleSubmit(event)}>\r\n        <h2>SGT-SGACL</h2>\r\n        <p>here Binding of SGT & SGACL happens</p>\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <label>\r\n          SGT &nbsp;&nbsp;\r\n          <select\r\n            name=\"sgtDropDown\"\r\n            value={this.state.selectedSecurityGroup}\r\n            onChange={name =>\r\n              this.onValueChangeSecurityGroup(name.target.value)\r\n            }\r\n          >\r\n          <option value={\"Select\"}>Select</option>\r\n\r\n            {this.state.SecurityGroup &&\r\n              this.state.SecurityGroup.length > 0 &&\r\n              this.state.SecurityGroup.map((item, index) => {\r\n                return (\r\n                  <option key={index.toString()} value={item.name}>\r\n                    {item.name}\r\n                  </option>\r\n                );\r\n              })}\r\n          </select>\r\n        </label>\r\n        &nbsp;&nbsp;&nbsp;&nbsp;\r\n        <label>\r\n          SGACL &nbsp;&nbsp;\r\n          <select\r\n            name=\"sgaclDropDown\"\r\n            value={this.state.selectedSecurityGroupACLs}\r\n            onChange={name =>\r\n              this.onValueChangeSecurityGroupACLs(name.target.value)\r\n            }\r\n          >\r\n            <option value={\"Select\"}>Select</option>\r\n            {this.state.SecurityGroupACLs &&\r\n              this.state.SecurityGroupACLs.length > 0 &&\r\n              this.state.SecurityGroupACLs.map((item, index) => {\r\n                return (\r\n                  <option key={index.toString()} value={item.name}>\r\n                    {item.name}\r\n                  </option>\r\n                );\r\n              })}\r\n          </select>\r\n        </label>\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <input type=\"submit\" value=\"Bind\" />\r\n        <button onClick={(event) => {event.preventDefault();\r\n          clearData(type.typeMapping);}}>RESET SG DATA</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Mapping;\r\n","// eslint-disable-next-line\r\nimport React, { Component } from 'react';\r\nimport logo from './../logo.svg';\r\nimport './../App.css';\r\nimport {\r\n  Link\r\n} from 'react-router-dom';\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n        <header>\r\n         <div className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <h2 > Welcome to React UI </h2>\r\n          </div>\r\n          <nav>\r\n          <ul>\r\n          <li className=\"first\">\r\n          <Link to=\"/Sgt\">SGT_________________________________</Link>\r\n          </li>\r\n          <li>\r\n          <Link to=\"/Sgacl\">SGACL_________________________________</Link>\r\n          </li>\r\n          <li>\r\n          <Link to=\"/Mapping\">MAPPING_________________________________</Link>\r\n          </li>\r\n          <li className=\"last\">\r\n          <Link to=\"/IP_SGTMapping\">IP-SGT</Link>\r\n          </li>\r\n          </ul>\r\n          </nav>\r\n        </header>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","// eslint-disable-next-line\r\nimport React, { Component } from 'react';\r\n\r\nclass HomePage extends React.Component {\r\n   render() {\r\n      return (\r\n         <div className=\"HomePage\">\r\n            <p>Welcome to HomePage of Trustsec.</p>\r\n         </div>\r\n\r\n      );\r\n   }\r\n}\r\n\r\nexport default HomePage;\r\n","// eslint-disable-next-line\r\nimport React, { Component } from \"react\";\r\nimport { type } from \"../utils/Type\";\r\nimport {\r\n  getStorage,\r\n  getSelectedMapping,\r\n  clearData\r\n} from \"../storage/asyncStorage\";\r\nimport { postData } from \"../network/API\";\r\n\r\nclass IP_SGTMapping extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  state = {\r\n    selectedMappingName: \"Select\",\r\n    selectedMapping: {},\r\n    mappings: [],\r\n    ipAddress: \"\",\r\n    selectedSecurityGroupUUID: \"\",\r\n    selectedSecurityGroupACLsUUID: \"\"\r\n  };\r\n  setMapping(selectedMapping) {\r\n    console.log(\"Inside setmapping\");\r\n    this.setState({ selectedMapping });\r\n    console.log(\"Inside setmapping\" + JSON.stringify(selectedMapping));\r\n  }\r\n  onValueChangeMapping(selectedMappingName) {\r\n    this.setState({ selectedMappingName });\r\n\r\n    getSelectedMapping(\r\n      selectedMappingName,\r\n      this.setMapping.bind(this)\r\n    );\r\n  }\r\n\r\n  componentWillMount() {\r\n    getStorage(type.typeMapping).then(async mappings => {\r\n      if (mappings) {\r\n        this.setState({ mappings });\r\n      }\r\n    });\r\n  }\r\n  handleSubmit(event) {\r\n\r\n    if(this.state.selectedMappingName === \"Select\"){\r\n      alert(\"Please Select a SecurityGroup\");\r\n      return;\r\n    }\r\n    console.log(\"selectedMapping:\" + JSON.stringify(this.state.selectedMapping));\r\n    console.log(\"selectedMappingName:\" + this.state.selectedMappingName);\r\n    console.log(\"destinationSgtId:\" + this.state.selectedMapping.destinationSgtId);\r\n    event.preventDefault();\r\n\r\n   postData(\r\n      this.state.selectedMapping.destinationSgtId,\r\n      this.state.ipAddress,\r\n      type.typeMapping\r\n    );\r\n    setTimeout(() => { postData(\r\n      this.state.selectedMapping.destinationSgtId,\r\n      this.state.selectedMapping.sgacls,\r\n      type.typeMatrixCell\r\n    ); }, 5000);\r\n\r\n\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={(event)=>this.handleSubmit(event)}>\r\n        <h2>IP-SGT-SGACL</h2>\r\n        <p>Here is the IP-SGT-SGACL mapping to be done</p>\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <label>\r\n          SGT &nbsp;&nbsp;\r\n          <select\r\n            name=\"sgtDropDown\"\r\n            value={this.state.selectedMappingName}\r\n            onChange={selectedMappingName =>\r\n              this.onValueChangeMapping(selectedMappingName.target.value)\r\n            }\r\n          >\r\n          <option value={\"Select\"}>Select</option>\r\n            {this.state.mappings &&\r\n              this.state.mappings.length > 0 &&\r\n              this.state.mappings.map((item, index) => {\r\n              if (item.sgtName)\r\n                return (\r\n                  <option key={index.toString()} value={item.sgtName}>\r\n                    {item.sgtName}\r\n                  </option>\r\n                );\r\n            })}\r\n          </select>\r\n        </label>\r\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n        <label>\r\n          Enter a destination URL: &nbsp;&nbsp;\r\n          <input\r\n            name=\"destUrl\"\r\n            type=\"string\"\r\n            value={this.state.destUrl}\r\n            onChange={ipAddress =>\r\n              this.setState({ ipAddress: ipAddress.target.value })\r\n            }\r\n          />\r\n          <br />\r\n          <br />\r\n          <br />\r\n        </label>\r\n        <input type=\"submit\" value=\"Submit\" />\r\n        <button\r\n          onClick={(event) => {\r\n            event.preventDefault();\r\n            localStorage.clear();\r\n          }}\r\n        >\r\n          RESET ALL\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default IP_SGTMapping;\r\n","import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link\n} from 'react-router-dom';\n\n\nimport './App.css';\n\nimport Sgt from './components/Sgt';\nimport Sgacl from './components/Sgacl';\nimport Mapping from './components/Mapping';\nimport Header from './components/Header';\nimport HomePage from './components/Homepage';\nimport IP_SGTMapping from './components/IP_SGTMapping'\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n      <div className=\"App\">\n\n        <Header />\n\n          <Route exact path='/' component={HomePage} />\n          <Route exact path='/Sgt' component={Sgt} />\n          <Route exact path='/Sgacl' component={Sgacl} />\n          <Route exact path='/Mapping' component={Mapping} />\n          <Route exact path='/IP_SGTMapping' component={IP_SGTMapping} />\n\n\n\n\n\n      </div>\n      </Router>\n    );\n  }\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}